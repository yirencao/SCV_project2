??include_app
rsconnect::deployApp()
install.packages("BiocManager")
install.packages("spDataLarge")
devtools::install_github("geocompr/geocompkg")
load("~/Documents/NTNU/Lausanne/EPFL/MATH-517/report/olav_used_files/data/chicago_maps_workspace.RData")
#Make the map
trip_total_map <- function(areas_trip_total, label_trip_total, revenue_pal) {
chicago_leaflet %>%
addPolygons(data=areas_trip_total,
fillColor=~revenue_pal(log10(areas_trip_total$trip_total)),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_trip_total,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = revenue_pal,
values = log10(areas_trip_total$trip_total),
title = "Trip total (in USD)",
opacity = 0.8,
labFormat = leaflet::labelFormat(
transform = function(x) 10^(x)))
}
#Commented out to save time
load("./olav_used_files/data/chicago_maps_workspace.RData")
#load("./olav_used_files/data/companies_time_workspace.RData")
library(tidyverse)
library(sf)
library(leaflet)
library(ggmap)
library(mapview)
library(rgdal)
library(RColorBrewer)
library(janitor)
library(lubridate)
library(boot)
library(ggplot2)
library(gganimate)
library(gifski)
citation("ggmap")
#Make the map
trip_total_map <- function(areas_trip_total, label_trip_total, revenue_pal) {
chicago_leaflet %>%
addPolygons(data=areas_trip_total,
fillColor=~revenue_pal(log10(areas_trip_total$trip_total)),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_trip_total,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = revenue_pal,
values = log10(areas_trip_total$trip_total),
title = "Trip total (in USD)",
opacity = 0.8,
labFormat = leaflet::labelFormat(
transform = function(x) 10^(x)))
}
#trip_total_map(areas_trip_total, label_trip_total, revenue_pal)
avg_waiting_time_map <- function(areas_pickup_time, label_avg_pickup_time, time_pal) {
chicago_leaflet %>%
addPolygons(data=areas_pickup_time,
fillColor=~time_pal(areas_pickup_time$avg_pickup_time),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_avg_pickup_time,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = time_pal,
labFormat = function(type, cuts, p) {  # To get custom labels
paste0(waiting_time_labels)
},
values = areas_pickup_time$avg_pickup_time,
title = "Average time between pickup and dropoff",
opacity = 0.8)
}
#avg_waiting_time_map(areas_pickup_time, label_avg_pickup_time, time_pal)
expected_hourly_rate_map <- function(areas_hourly_rate, label_avg_hourly_rate, hourly_pal, hourly_labels) {
chicago_leaflet %>%
addPolygons(data=areas_hourly_rate,
fillColor=~hourly_pal(areas_hourly_rate$hourly_rate),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_avg_hourly_rate,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = hourly_pal,
labFormat = function(type, cuts, p) {  # To get custom labels
paste0(hourly_labels)
},
values = areas_hourly_rate$hourly_rate,
title = "Average hourly rate",
opacity = 0.8)
}
avg_waiting_time_map <- function(areas_pickup_time, label_avg_pickup_time, waiting_time_labels, time_pal) {
chicago_leaflet %>%
addPolygons(data=areas_pickup_time,
fillColor=~time_pal(areas_pickup_time$avg_pickup_time),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_avg_pickup_time,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = time_pal,
labFormat = function(type, cuts, p) {  # To get custom labels
paste0(waiting_time_labels)
},
values = areas_pickup_time$avg_pickup_time,
title = "Average time between pickup and dropoff",
opacity = 0.8)
}
#avg_waiting_time_map(areas_pickup_time, label_avg_pickup_time, waiting_time_labels, time_pal)
save.image("~/Documents/NTNU/Lausanne/EPFL/MATH-517/report/olav_used_files/data/chicago_maps_workspace.RData")
load("./olav_used_files/data/chicago_maps_workspace.RData")
#Make the map
trip_total_map <- function(chicago_leaflet, areas_trip_total, label_trip_total, revenue_pal) {
chicago_leaflet %>%
addPolygons(data=areas_trip_total,
fillColor=~revenue_pal(log10(areas_trip_total$trip_total)),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_trip_total,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = revenue_pal,
values = log10(areas_trip_total$trip_total),
title = "Trip total (in USD)",
opacity = 0.8,
labFormat = leaflet::labelFormat(
transform = function(x) 10^(x)))
}
#trip_total_map(chicago_leaflet, areas_trip_total, label_trip_total, revenue_pal)
avg_waiting_time_map <- function(chicago_leaflet, areas_pickup_time, label_avg_pickup_time, waiting_time_labels, time_pal) {
chicago_leaflet %>%
addPolygons(data=areas_pickup_time,
fillColor=~time_pal(areas_pickup_time$avg_pickup_time),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_avg_pickup_time,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = time_pal,
labFormat = function(type, cuts, p) {  # To get custom labels
paste0(waiting_time_labels)
},
values = areas_pickup_time$avg_pickup_time,
title = "Average time between pickup and dropoff",
opacity = 0.8)
}
#avg_waiting_time_map(chicago_leaflet, areas_pickup_time, label_avg_pickup_time, waiting_time_labels, time_pal)
expected_hourly_rate_map <- function(chicago_leaflet, areas_hourly_rate, label_avg_hourly_rate, hourly_pal, hourly_labels) {
chicago_leaflet %>%
addPolygons(data=areas_hourly_rate,
fillColor=~hourly_pal(areas_hourly_rate$hourly_rate),
color="lightgrey",
weight=2,
fillOpacity=0.8,
highlightOptions = highlightOptions(
weight=3,
opacity=2,
color="azure1",
bringToFront=TRUE),
label=label_avg_hourly_rate,
labelOptions=labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend("bottomright",
pal = hourly_pal,
labFormat = function(type, cuts, p) {  # To get custom labels
paste0(hourly_labels)
},
values = areas_hourly_rate$hourly_rate,
title = "Average hourly rate",
opacity = 0.8)
}
#expected_hourly_rate_map(chicago_leaflet, areas_hourly_rate, label_avg_hourly_rate, hourly_pal, hourly_labels)
save.image("~/Documents/NTNU/Lausanne/EPFL/MATH-517/report/olav_used_files/data/chicago_maps_workspace.RData")
library(tidyverse)
library(ggplot2)
library(gganimate)
library(janitor)
library(lubridate)
#Get workspace:
load("./data/companies_time_workspace.RData")
#Get workspace:
load("./olav_used_files/data/companies_time_workspace.RData")
trips_per_company <- ggplot(
data = taxi_trips_companies,
mapping = aes(x = revenue, y = trips, size = size, color = company)
) +
geom_point(show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = "Revenue", y = "Number of trips")
trips_per_company +
transition_time(month) +
labs(title = "Month: {frame_time}")
trips_per_company <- ggplot(
data = taxi_trips_companies,
mapping = aes(x = revenue, group = company,
color = as.factor(company), fill = as.factor(company))
) +
geom_tile(mapping = aes(y = revenue), show.legend = FALSE, alpha = 0.7) +
scale_color_viridis_d() +
scale_size(range = c(2, 12)) +
labs(x = "Revenue", y = "Number of trips")
install.packages("RSocrata")
library("RSocrata")
df <- read.socrata(
"https://data.cityofchicago.org/resource/h4cq-z3dy.json",
app_token = "64VaEjBKFZGXurbKpn2NoFmof",
email     = "user@example.com",
password  = "fakepassword"
)
df <- read.socrata(
"https://data.cityofchicago.org/resource/h4cq-z3dy.json",
app_token = "64VaEjBKFZGXurbKpn2NoFmof",
email     = "olav.forland@epfl.ch",
password  = "fakepassword"
)
df <- read.socrata(
"https://data.cityofchicago.org/resource/h4cq-z3dy.json",
app_token = "64VaEjBKFZGXurbKpn2NoFmof",
email     = "olav.forland@epfl.ch",
password  = "Me_gusta12345"
)
socrataEmail <- Sys.getenv("SOCRATA_EMAIL", "olav.forland@epfl.ch")
socrataPassword <- Sys.getenv("SOCRATA_PASSWORD", "Me_gusta12345")
taxi_trips_2019 <- "https://soda.demo.socrata.com/resource/a9g2-feh2.csv"
read.socrata(url = taxi_trips_2019, email = socrataEmail, password = socrataPassword)
allSitesDataFrame <- ls.socrata("https://soda.demo.socrata.com")
allSitesDataFrame
read.socrata(url = taxi_trips_2019, email = socrataEmail, password = socrataPassword)
socrataPassword <- Sys.getenv("SOCRATA_PASSWORD", "Me_gusta12345", unset = "")
socrataPassword <- Sys.getenv("SOCRATA_PASSWORD", "Me_gusta12345", unset = "hehe")
socrataPassword <- Sys.getenv("SOCRATA_PASSWORD", "Me_gusta12345", unset = "")
allSitesDataFrame <- ls.socrata("https://soda.demo.socrata.com")
taxi_trips_2019 <- "https://soda.demo.socrata.com/resource/a9g2-feh2.csv"
taxi_trips_2019 <- "https://data.cityofchicago.org/resource/h4cq-z3dy.json"
read.socrata(url = taxi_trips_2019, email = socrataEmail, password = socrataPassword)
taxi_trips_2019 <- "https://data.cityofchicago.org/resource/h4cq-z3dy.csv"
read.socrata(url = taxi_trips_2019, email = socrataEmail, password = socrataPassword)
getResponse(taxi_trips_2019, email, password)
token_2019 = "64VaEjBKFZGXurbKpn2NoFmof"
read.socrata(url = taxi_trips_2019,
app_token = token_2019,
email = socrataEmail,
password = socrataPassword)
library("RSocrata")
taxi_trips_2019 <- "https://data.cityofchicago.org/resource/h4cq-z3dy.csv"
token_2019 = "64VaEjBKFZGXurbKpn2NoFmof"
read.socrata(url = taxi_trips_2019,
app_token = token_2019,
email = socrataEmail,
password = socrataPassword)
taxi_trips_2019 <- "https://data.cityofchicago.org/resource/h4cq-z3dy.json"
token_2019 = "64VaEjBKFZGXurbKpn2NoFmof"
read.socrata(url = taxi_trips_2019,
app_token = token_2019,
email = socrataEmail,
password = socrataPassword)
devtools::install_github("Chicago/RSocrata")
library("RSocrata")
taxi_trips_2019 <- "https://data.cityofchicago.org/resource/h4cq-z3dy.json"
token_2019 = "64VaEjBKFZGXurbKpn2NoFmof"
read.socrata(url = taxi_trips_2019,
app_token = token_2019,
email = socrataEmail,
password = socrataPassword)
read.socrata(url = taxi_trips_2019,
app_token = token_2019,
email = socrataEmail,
password = "Me_gusta12345")
